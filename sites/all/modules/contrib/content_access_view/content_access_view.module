<?php

/**
 * Implements hook_permission(). 
 */
function content_access_view_permission() {
  // Add permissions "view own" and "view any" per each node content type
  $permissions = _content_access_view_permissions_list();
  return $permissions;
}

function content_access_view_form_alter(&$form, &$form_state, $form_id) {
  switch ($form_id) {
    case 'user_admin_permissions':
      $form['#submit'][] = 'content_access_view_user_admin_perm_submit';
      break;
    case 'content_access_admin_settings':
      $form['#submit'][] = 'content_access_view_add_permissions_submit';
      break;
  }
}

/**
 * Prepare permissions list for "view own" and "view any" per each node content 
 * type
 */
function _content_access_view_permissions_list() {
  $permissions = array();

  foreach (node_type_get_types() as $type => $info) {
    $permissions += array(
      "view own $type content" => array(
        'title' => t('%type_name: View own content', array('%type_name' => $info->name)),
      ),
      "view any $type content" => array(
        'title' => t('%type_name: View any content', array('%type_name' => $info->name)),
      ),
    );
  }

  return $permissions;
}

function content_access_view_add_permissions_submit($form, $form_state) {
  $roles_permissions = user_role_permissions(user_roles());
  $permissions = user_permission_get_modules();

  // Remove disabled modules permissions, so they can't raise exception
  // in content_access_save_permissions()
  foreach ($roles_permissions as $rid => $role_permissions) {
    foreach ($role_permissions as $permission => $value) {
      if (!array_key_exists($permission, $permissions)) {
        unset($roles_permissions[$rid][$permission]);
      }
    }
  }

  foreach (array('view', 'view_own') as $op) {
    foreach ($form_state['values'][$op] as $rid => $value) {
      $permission = _content_access_view_get_permission_by_op($op, $form_state['type']);
      if ($value) {
        $roles_permissions[$rid][$permission] = TRUE;
      }
      else {
        $roles_permissions[$rid][$permission] = FALSE;
      }
    }
  }

  content_access_save_permissions($roles_permissions);
}

/**
 * Gets the name of a permission for the given operation, if there is a suiting one.
 */
function _content_access_view_get_permission_by_op($op, $type) {
  switch ($op) {
    default:
      return FALSE;
    case 'view':
      return 'view any ' . $type . ' content';
    case 'view_own':
      return 'view own ' . $type . ' content';
  }
}

/**
 * Saves view permissions at permissins administration page
 */
function content_access_view_user_admin_perm_submit($form, $form_state) {
  $node_types = array_keys(node_type_get_types());

  // Set settings per node type.
  foreach ($node_types as $node_type) {
    
    // Prepare content access permission settings array of node type.
    $settings = content_access_get_settings('all', $node_type);
  
    // Debuging.
    if($node_type == 'erpal_crm_activity') {
      $a = 1;
    }
    
    // Get non admin roles and unset them
    _content_access_view_leave_admin_permissions($settings, 'view');
    _content_access_view_leave_admin_permissions($settings, 'view_own');

    // Set values for "view own" and "view any" permissions.
    foreach ($form_state['values']['role_names'] as $rid => $name) {
      // View any.
      if(!empty($form_state['values'][$rid]["view any $node_type content"])) {
        //if($rid !=  1 && !in_array(2, $settings['view'])) {
          $settings['view'][] = $rid;
        //}
      }
      // View own.
      if(!empty($form_state['values'][$rid]["view own $node_type content"])) {
        //if($rid !=  1 && !in_array(2, $settings['view'])) {
          $settings['view_own'][] = $rid;
        //}
      }

    }

    // Update content access settings.
    content_access_set_settings($settings, $node_type);
  }
  
  // Update content access permissions.
  if (!empty($node_types)) {
    module_load_include('inc', 'content_access', 'content_access.admin');
    content_access_mass_update(array($node_types));
  }
}

/**
 * Unset non admin roles.
 */
function _content_access_view_leave_admin_permissions(&$settings, $permission_type) {
  // Get admin roles.
  $admin_roles = content_access_get_permission_access('administer nodes');
  if (isset($settings[$permission_type])) {

    // Get non admin roles.
    $not_admin_roles = array_diff($settings[$permission_type], $admin_roles);
    
    // Unset non admin roles.
    if (!empty($not_admin_roles)) {
      foreach ($not_admin_roles as $not_admin_role_key => $not_admin_role) {
        unset($settings[$permission_type][$not_admin_role_key]);
      }
    }
  }
}

/**
 * Remove all content_access_view permissions of role.
 * If role is not provided - removes all content_access_view permissions.
 * 
 * @param int|array(int) $rid
 *   Role id or array of role id's.
 */
function content_access_view_remove_permissions($rid = NULL) {

  // Step 1. 
  // Clear view permissions from content_access_get_settings variable.
  $node_types = array_keys(node_type_get_types());
  
  foreach ($node_types as $node_type) {
    
    $settings = content_access_get_settings('all', $node_type);

    $settings['view_own'] = array();
    $settings['view'] = array();

    content_access_set_settings($settings, $node_type);
  }

  // Step 2. 
  // Clear view permissions from role_permission table.
  $query = db_delete('role_permission');
  $query->condition('module', 'content_access_view');

  // Check role id
  if ($rid) {
    if (!is_array($rid)) {
      $rid = array($rid);
    }
    $query->condition('rid', $rid, 'IN');
  }

  $query->execute();

  // Step 3. Update content_access permissions
  module_load_include('inc', 'content_access', 'content_access.admin');
  content_access_mass_update($node_types);
}

/**
 * Syncs all view permissions from role_permission table with content access 
 * settings.
 */
function content_access_view_sync() {
  $node_types = array_keys(node_type_get_types());

  // Get roles.
  $role_names = user_roles();
  // Fetch permissions for all roles or the one selected role.
  $role_permissions = user_role_permissions($role_names);
  
  // Loop all values of "view own" and "view any" permissions values per each 
  // node content type.
  foreach ($node_types as $node_type) {
    // Debuging.
    if($node_type == 'erpal_crm_activity') {
      $a = 1;
    }
    
    // Get content access permission settings array.
    $settings = content_access_get_settings('all', $node_type);

    // Default empty arrays for view any/own permissions.
    $settings['view_own'] = array();
    $settings['view'] = array();

    foreach ($role_permissions as $rid => $role_permission) {

      // Add "view any ..." permissions.
      if (!empty($role_permission["view any $node_type content"])) {
        $settings['view'][] = $rid;
      }

      // Add "view own ..." permissions.
      if (!empty($role_permission["view own $node_type content"])) {
        $settings['view_own'][] = $rid;
      }
    }
    
    // Update content access settings.
    content_access_set_settings($settings, $node_type);
  }

  // Update content access permissions.
  if (!empty($node_types)) {
    module_load_include('inc', 'content_access', 'content_access.admin');
    content_access_mass_update($node_types);
  }
}
